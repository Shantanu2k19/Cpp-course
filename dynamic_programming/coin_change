//minimum coin change, problem 3 DP

#include<iostream>
#include<climits>
#include<algorithm>
using namespace std;


int coins[]={1,7,10};
int arrLength = sizeof(coins)/sizeof(int);


//top down solution
int minCoin(int n,int dp[]){
    //base case 
    if(n==0)
    return 0;

    //lookup
    if(dp[n] != 0) return dp[n];

    //recursive case
    int ans=INT_MAX,temp=0;
    for(int i=0; i<arrLength; i++){
        if( (n-coins[i]) >= 0){
            temp = minCoin(n-coins[i] ,dp);
            ans=min(ans,temp+1);
        }
    }
    dp[n]=ans;
    return dp[n];
}

//bottom up approach
int minCoinBU(int N){
    int dp[100]={0};

    //iterate all states. 1 to n
    for(int n=1;n<=N;n++){  
        //current answer as int_max
        dp[n]=INT_MAX;

        for(int i=0;i<arrLength;i++){
            if(n-coins[i] >= 0){
                int ans = dp[ n-coins[i] ];
                dp[n] = min(dp[n], ans+1);
            }
        }
    }
    return dp[N];
}

int main() {
    int n=15;
    int dp[100]={0};
    //cout<<minCoin(n,dp);
    cout<<minCoinBU(n);
}
