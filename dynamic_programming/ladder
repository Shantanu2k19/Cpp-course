/* ladder problem
given n steps,
you can climb k steps or less at a time
find all the possible ways in which one can climb up the ladders
*/

#include <iostream>
using namespace std;

//top down approach
int ladders_topDown(int n,int k,int dp[]){
    //base case
    if(n==0) return 1;

    //lookup for dp approach
    if(dp[n] != 0) return dp[n];
    
    //rec case
    int ways=0;
    for(int i=1;i<=k;i++){
        if(n-i>=0){
            ways += ladders_topDown(n-i,k,dp);
        }
    }
    return dp[n] = ways;
}

//bottom up approach
int ladder_bottomUp(int n,int k){
    int dp[100]={0};

    dp[0]=1; //starting case 
    for(int i=1;i<=n;i++){
        dp[i]=0;
        for(int j=1;j<=k;j++){
            if(i-j>=0){
                dp[i] += dp[i-j];
            }
        }
    }
    //see for the bottom up
    for(int i=0;i<=n;i++){
        cout<<dp[i]<<" ";
    }
    return 0;
}

//another optimised approach
int ladder_optimised(int n,int k){
    int dp[100]={0};
    
    dp[0] = dp[1] = 1;
    for(int i=2;i<=k;i++){  //for i<=k
        dp[i]=2*dp[i-1];
    }
    for(int i=k+1;i<=n;i++){  //for i>k
        dp[i] = 2*dp[i-1] - dp[i-k-1];
    }
    //print 
    for(int i=0;i<=n;i++){
        cout<<dp[i]<<" ";
    }
    return dp[n];
}


int main() {
    int n,k;
    cin>>n>>k;
    int dp[100]={0};

    //cout<<ladders_topDown(n,k,dp);
    //ladder_bottomUp(n,k);
    ladder_optimised(n,k);
}
